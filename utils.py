import os
import re
import sys
import requests
import shutil
import json
import stat
from os import path
from colorama import Fore, init
import psutil

if psutil.Process(os.getpid()).parent().name() == 'cmd.exe':
    init(convert=True)


def createPath(path):
    if not os.path.exists(path):
        os.makedirs(path, 777)
        return True


def getConfigDir():
    if sys.platform == "win32" :
        app_config_dir = os.getenv("LOCALAPPDATA")
    else :
        app_config_dir = os.getenv("HOME")
        if os.getenv("XDG_CONFIG_HOME"):
            app_config_dir = os.getenv("XDG_CONFIG_HOME")

    configDir = os.path.join(os.path.join(app_config_dir, ".localconfig"), 'configstore')
    createPath(configDir);
    if os.path.exists(configDir) and not os.path.isfile(os.path.join(configDir, 'ResuME.json')):
        with open(os.path.join(configDir, 'ResuME.json'), 'w') as cf:
            json.dump({}, cf)
    return configDir


def setENV(envs):
   with open(os.path.join(getConfigDir(), 'ResuME.json'), 'w') as f:
        json.dump(envs, f)


def getENV(item):
    with open(os.path.join(getConfigDir(), 'ResuME.json')) as f:
        data = json.load(f)
    return data[item]


def verifyLinkedinURL(url):
    link = re.compile('((http(s?)://)*([www])*\.|[linkedin])[linkedin/~\-]+\.[a-zA-Z0-9/~\-_,&=\?\.;]+[^\.,\s<]')
    return(link.match(url))


def builder(data):
    dta = json.loads(data)
    # get output path
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    # create output directory if it doesn't exist
    if not os.path.exists(path_output):
        createPath(path_output);
    # check if folder exists in the Output directory or github repo
    dest = path_output+"/ResuMe-"+dta['profile']['name'].replace(" ","-")
    if(os.path.isdir(dest)):
        return True;
    # # add data.json to template folder
    # path_template = os.path.join(os.path.dirname(__file__), 'Template') 
    # with open(path_template+"/data.json", "w") as outfile:
    #     outfile.write(data)
    name = dta['profile']['name']
    if(name.endswith('.')):
        name = dta['profile']['name'][:-1]
    github(name,data)


def github(name, data):
    # get output path
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    dest = "/ResuMe-"+name.replace(" ","-")
    PAT = getENV("PAT")
    Owner = getENV("owner")
    # clone template folder into path_output as dest
    os.chdir(path_output);
    PAT = getENV("PAT");
    os.system('git clone https://'+PAT+'@github.com/ishita1805/ResuMe-Template.git .'+dest);

    API_URL = 'https://api.github.com'
    Payload = '{ "name":"ResuMe-'+name.replace(" ","-")+'", "description":"This repository is auto generated by ResuME-Website Generator" }'
    Headers = {
        "Authorization": "token "+PAT,
        "Accept": "application/vnd.github.v3+json"
    }
    # create a new repo
    requests.post(API_URL+'/user/repos',data=Payload, headers=Headers)
    os.chdir(path_output+dest)
    # copy data into data.json
    with open("./data.json", "w") as outfile:
            outfile.write(data)
    # push to github
    os.system("git add .")
    os.system("git commit -m 'website-generated'")
    os.system("git remote set-url origin https://github.com/"+Owner+"/ResuMe-"+name.replace(" ","-")+".git")
    os.system("git branch -M main")
    os.system("git push -u origin main")
    

def updateBuilder(data):
    dta = json.loads(data)
    # check if folder doesn't exists
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    dest = path_output+"/ResuMe-"+dta['profile']['name'].replace(" ","-")
    if(os.path.isdir(dest)==False):
        return True;
    # add data.json to output folder 
    with open(path_output+"/ResuMe-"+dta['profile']['name'].replace(" ","-")+"/data.json", "w") as outfile:
        outfile.write(data)
    # push to github
    os.chdir(path_output+"/ResuMe-"+dta['profile']['name'].replace(" ","-"))
    if(os.system('git rev-parse --verify gh-pages') == 0):
        os.system("git add .")
        os.system("git commit -m 'website-updated'")
        os.system('git push --set-upstream origin gh-pages -f')
    else:
        os.system("git add .")
        os.system("git commit -m 'website-updated'")
        os.system("git push origin master -f")


def deployer(repo):
    # change directory and create a new branch
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    os.chdir(path_output+'/'+repo)
    os.system('git checkout -b gh-pages')
    
    # modify readme file
    f = open('README.md','a')
    f.write('\n**your ResuMe is deployed at:** https://'+getENV('owner')+'.github.io/'+repo+'\n')
    f.close()
    # push new branch to github
    os.system("git add .")
    os.system("git commit -m 'website-deployed'")
    os.system("git push origin gh-pages")

    return 'https://'+getENV('owner')+'.github.io/'+repo+'/'


def list():
    # get output path
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    os.chdir(path_output);
    list = os.listdir();
    if(len(list) <= 0):
        print(Fore.LIGHTGREEN_EX+'No ResuMe\'s Available, Try the "build" command'.strip())
    else:
        print(Fore.LIGHTGREEN_EX+'Available ResuMe\'s:'.strip())
        for i in range(0,len(list)):
            print(Fore.GREEN+list[i].strip())
        


def delRepo(repo):
    # get output path
    Output = getENV("Output");
    path_output = os.path.join(Output, 'Output')
    os.chdir(path_output)
    check = False
    # check if repo exists
    list = os.listdir()
    for i in range(0,len(list)):
        if(list[i] == repo):
            check = True
    if(check == False):
        print(Fore.RED+'Error: ResuMe not found')
        return;
    # delete this repo from output directory
    for root, dirs, files in os.walk(repo):  
        for dir in dirs:
            os.chmod(path.join(root, dir), stat.S_IRWXU)
        for file in files:
            os.chmod(path.join(root, file), stat.S_IRWXU)
    shutil.rmtree(repo)
    
    # delete this repo from github
    PAT = getENV("PAT")
    Owner = getENV("owner")
    API_URL = 'https://api.github.com/repos/'+Owner+'/'+repo
    Headers = {
        "Authorization": "token "+PAT,
        "Accept": "application/vnd.github.v3+json"
    }
    requests.delete(API_URL, headers=Headers)
    print(Fore.GREEN+'\nResuMe Deleted'.strip())